---
layout: post
comments: true
title: "LLM Evaluation Lifecycle"
excerpt: "Build robust evaluation life cycle for your LLM applications."
date:   2025-06-08 07:00:00
mathjax: false
---

The moat behind every successful AI product is the robust evaluation, or "Evals". This is what sets your product apart from all other competitors. Through doing Evals, you get a better understanding of your users' and customers' needs more than anyone else. You learn what they want from your product, identify where your product falls short, and continuously make concrete improvements. This continuous feedback loop of evaluation and improvement is the key to building a truly exceptional product.

Before diving into Evals, it's essential to know how to determine the ground truth label - the expected, correct answer. This is usually defined by one domain expert (or group of experts) as the human evaluator, defining precisely what a successful AI output looks like and ensuring alignment with their expectations. The entire LLM evaluation process can then be effectively broken down into three core stages: Analyze, Measure, and Improve.

## Analyze

The goal of error analysis is to discover what is actually breaking (errors) within our app, and knowing how our app is actually being used by users. Here are the steps to do error analysis:

1. [generate evaluation dataset](https://github.com/ai-evals-course/recipe-chatbot/blob/55445295232064ba857b7a174c913120b0cb36b4/homeworks/hw2/generate_synthetic_queries.py)
    
    list down all possible realistic user queries for your app
    
    identify key dimensions > generate unique combinations (tuples) > generate user queries
    
    **end result:** store as [csv of id, query](https://github.com/ai-evals-course/recipe-chatbot/blob/55445295232064ba857b7a174c913120b0cb36b4/homeworks/hw2/synthetic_queries_for_analysis.csv)
    
2. [run traces on evaluation dataset](https://github.com/ai-evals-course/recipe-chatbot/blob/55445295232064ba857b7a174c913120b0cb36b4/scripts/bulk_test.py)
    
    run agent response on the evaluation dataset
    
    **end result:** store to a [csv/json of id, query, and response](https://github.com/ai-evals-course/recipe-chatbot/blob/55445295232064ba857b7a174c913120b0cb36b4/homeworks/hw2/results_20250518_215844.csv)
    
3. setup annotation app
    
    build custom interface for (speeding up) the annotation process (open and axial coding). can use tools like Phoenix, Braintrust, or build your own using vibe coding ([tutorial](https://youtu.be/qH1dZ8JLLdU?si=8aejLH8ilEHi-qoN)) also last part of lesson 7
    
    - HTML/CSS + FastAPI
    - FastHTML + HTMX / MonsterUI
    
    end result: example [app](https://github.com/ai-evals-course/recipe-chatbot/blob/55445295232064ba857b7a174c913120b0cb36b4/annotation/annotation.py)
    
4. open coding
    
    going through each trace and manually give human feedback
    
    end result: modifies the traces csv/json file with open coding notes
    
5. axial coding
    
    categorize open coding notes into (groups of) failure modes. 
    
    can use LLM to help with this to create failure mode taxonomy
    
    example prompt
    
    end result: modifies the traces csv/json file with axial coding notes


## Measure

The goal of Measure step is to quantify the performance of our application. After doing error analysis, we have known the different failure modes that exist in our application. The way we measure performance for generative outputs is to have a metric for each failure mode we want to evaluate, hence we may have multiple metrics. make sure to have a metric for each simple single narrow scoped failure mode.

The way we quantify/measure the performance of LLM applications is as follows:

1. Letâ€™s say we have 100 user **inputs**. these can be stored as as our evaluation dataset as they are fixed.
2. we then can generate **responses** from our application on those inputs. 
3. we can have precise definitions of Pass/Fail to evaluate those responses. based on that, we **label** each response as Pass/Fail.
4. If out of the 100 responses, 85 passed and 15 failed, then the **performance** of the application for the given failure mode is 85%. 

This way we can make improvements to our application and measure again the performance to see if it actually has improved or not.


## Improve

After the Measure step, we have a more deterministic way to check whether changes that we made to the system actually improve the system or not for a given failure mode. It is not best practice to skip the Measure step as you will most likely just eye ball responses and subjectively decide improvements when you see less errors for the given failure mode. That does not guarantee that your system has actually improved for handling the given failure mode (need to quantify the improvement).

Here are ways to Improve an LLM system

1. Set model parameters
2. Prompt engineering
3. RAG / Tools
4. Fine tuning
5. Choose a more capable model
